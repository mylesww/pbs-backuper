背景:
我需要一个配合rclone等云端存储对pve backup server的.chunk数据进行备份的cli工具. .chunk目录下都是以0000到ffff的四位16进制命名的文件夹. 

需求:
我需要按照前缀分组进行压缩备份, 比如如果传入的前缀位数是2, 那么0000到00ff的文件夹会被打包成一个压缩包0000-00ff.tar.gz, 0100到01ff的文件夹会被打包成另一个压缩包0100-01ff.tar.gz, 以此类推. 计算出对应压缩包的sha256值,作为压缩包同名的.sha256文件, 然后上传到rclone中. 此外作增量备份的辅助判断, 将.chunk文件夹下所有文件及文件夹的修改时间和大小信息按照树形结构记录到一个.json文件中, 同时记录上前缀位数,方便后续对比.

增量备份的逻辑为:
1. 读取上次备份时生成的.json文件, 获取上次备份时的文件及文件夹信息及前缀位数.
2. 遍历当前.chunk目录下的所有文件及文件夹, 获取修改时间和大小信息,对比json里的文件树形结构, 找出新增或修改的文件及文件夹(通过文件结构,修改时间, 文件大小),只要有一个对不上, 意味着顶层的这个压缩包需要重新打包了.
3. 打包这些需要重新打包的压缩包, 计算出对应的sha256值. 
4. 通过与远端的同名.sha256文件值对比,如果与上次备份的sha256值不同或sha256不存在, 则上传压缩包到rclone中, 并记录.
5. 如果与上次备份的sha256值相同, 则跳过上传, 并记录.
7. 只要更新了压缩包文件， 都要更新对应的sha256文件，文件名是：压缩包名.sha256
6. 在全部操作完成后, 生成新的.json文件, 记录当前的文件及文件夹信息及前缀位数. 上传到rclone中. 并在本地保留一份.

增量备份例子：
当位数是2
1. .chunk/0010/foo 这个文件修改了， 那么根据规则， 0000-00ff.tar.gz这个压缩包就需要重新打包,如果打包出来的sha256与0000-00ff.sha256文件内的值对不上，那么就要重新上传
2. 在.chunk/eeee/ 新增了abc这个文件，根据规则，ee00-eeff.tar.gz 需要重新打包并上传
3. 在.chunk/aa00/aaa 这个文件不在了，那么aa00-aaff.tar.gz 也需要重新打包并上传





这是一个cli的小工具, 我会传入一个云端存储的路径, rclone的配置文件路径, rclone的二进制路径, 传输时的额外参数, 以及.chunk目录的路径, 还有临时文件的路径(打包压缩包等会用到), 以及前缀位数(只有全量模式有效), 以及模式(增量备份/全量备份). 其他参数可以自行设计. 整个项目尽量不要设计得太复杂, 只要能满足需求即可. 由于可能接入其他的存储api，所以将rclone的云端操作：列出某个文件夹下的文件、下载、上传操作抽象成统一的函数，这样后续接入其他存储api时只需要实现这些函数即可。